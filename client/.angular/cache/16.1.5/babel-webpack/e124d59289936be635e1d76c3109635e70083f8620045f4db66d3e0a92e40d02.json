{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RequestService {\n  constructor(http) {\n    this.http = http;\n  }\n  getComboxFields() {\n    return this.http.get('http://jsonplaceholder.typicode.com/posts').pipe(catchError(this.errorHandler));\n  }\n  errorHandler(error) {\n    return throwError(() => error.message);\n  }\n}\nRequestService.ɵfac = function RequestService_Factory(t) {\n  return new (t || RequestService)(i0.ɵɵinject(i1.HttpClient));\n};\nRequestService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RequestService,\n  factory: RequestService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","throwError","RequestService","constructor","http","getComboxFields","get","pipe","errorHandler","error","message","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\andre\\OneDrive\\Рабочий стол\\bkk\\task-bkk\\client\\src\\app\\request.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RequestService {\n\n  constructor(private http: HttpClient) { }\n\n  getComboxFields() {\n   return this.http\n   .get('http://jsonplaceholder.typicode.com/posts')\n   .pipe(\n    catchError(this.errorHandler)\n   )\n  }\n\n  private errorHandler(error: HttpErrorResponse) {\n    return throwError(() => error.message)\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAK7C,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,eAAeA,CAAA;IACd,OAAO,IAAI,CAACD,IAAI,CACfE,GAAG,CAAC,2CAA2C,CAAC,CAChDC,IAAI,CACJP,UAAU,CAAC,IAAI,CAACQ,YAAY,CAAC,CAC7B;EACF;EAEQA,YAAYA,CAACC,KAAwB;IAC3C,OAAOR,UAAU,CAAC,MAAMQ,KAAK,CAACC,OAAO,CAAC;EACxC;;AAdWR,cAAc,C;mBAAdA,cAAc,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAdZ,cAAc,C;SAAdA,cAAc;EAAAa,OAAA,EAAdb,cAAc,CAAAc,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
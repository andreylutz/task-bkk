{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/request.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../global-error/global-error.component\";\nimport * as i6 from \"../field-error-display/field-error-display.component\";\nfunction FormComponent_option_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r1.title);\n  }\n}\nexport let FormComponent = /*#__PURE__*/(() => {\n  class FormComponent {\n    constructor(svc, router, formBuilder) {\n      this.svc = svc;\n      this.router = router;\n      this.formBuilder = formBuilder;\n    }\n    isFieldValid(field) {\n      return !this.form.get(field).valid && this.form.get(field).touched || this.form.get(field).untouched && this.formSumitAttempt;\n    }\n    ngOnInit() {\n      this.svc.getComboxFields().subscribe(data => {\n        this.comboboxData = data;\n      });\n      this.form = this.formBuilder.group({\n        fieldOne: [null, [Validators.required, myValidatorField]],\n        fieldSelect: [null, Validators.required],\n        fieldCheck: [null, [Validators.required, myValidatorCheckbox]]\n      });\n    }\n    handleSubmit() {\n      this.formSumitAttempt = true;\n      if (this.form.valid) {\n        this.router.navigate(['/main']);\n        console.log(this.form.value);\n      }\n    }\n    reset() {\n      this.form.reset();\n      this.formSumitAttempt = false;\n    }\n  }\n  FormComponent.ɵfac = function FormComponent_Factory(t) {\n    return new (t || FormComponent)(i0.ɵɵdirectiveInject(i1.RequestService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n  FormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormComponent,\n    selectors: [[\"app-form\"]],\n    decls: 27,\n    vars: 5,\n    consts: [[1, \"form-fields\", 3, \"formGroup\"], [1, \"group_input\"], [\"id\", \"name\", 1, \"form-field__one\"], [\"type\", \"number\", \"formControlName\", \"fieldOne\", \"placeholder\", \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435\", 1, \"form-field__fieldOne\"], [1, \"errors\"], [\"errorMsg\", \"\\u041D\\u0435\\u043E\\u0431\\u0445\\u043E\\u0434\\u0438\\u043C\\u043E \\u0447\\u0438\\u0441\\u043B\\u043E \\u043E\\u0442 18 \\u0434\\u043E 120\", 3, \"displayError\"], [1, \"form-field__two\"], [\"formControlName\", \"fieldSelect\", 1, \"form-field__combobox\"], [\"value\", \"\"], [4, \"ngFor\", \"ngForOf\"], [\"errorMsg\", \"\\u041F\\u043E\\u043B\\u0435 \\u043D\\u0435 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0431\\u044B\\u0442\\u044C \\u043F\\u0443\\u0441\\u0442\\u044B\\u043C\", 3, \"displayError\"], [1, \"form-field__three\"], [\"type\", \"checkbox\", \"formControlName\", \"fieldCheck\"], [1, \"from-field__four\"], [1, \"btn\", \"btn__primary\", 3, \"disabled\", \"click\"]],\n    template: function FormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelement(1, \"app-global-error\");\n        i0.ɵɵelementStart(2, \"h3\");\n        i0.ɵɵtext(3, \"\\u0424\\u043E\\u0440\\u043C\\u0430 \\u0441 \\u043F\\u043E\\u043B\\u044F\\u043C\\u0438\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 1)(5, \"div\", 2);\n        i0.ɵɵelement(6, \"input\", 3);\n        i0.ɵɵelementStart(7, \"div\", 4);\n        i0.ɵɵelement(8, \"app-field-error-display\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\", 6)(10, \"select\", 7)(11, \"option\", 8);\n        i0.ɵɵtext(12, \"--select--\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(13, FormComponent_option_13_Template, 2, 1, \"option\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 4);\n        i0.ɵɵelement(15, \"app-field-error-display\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 11)(17, \"label\")(18, \"p\");\n        i0.ɵɵtext(19, \"\\u0421\\u043E\\u0433\\u043B\\u0430\\u0441\\u0435\\u043D \\u043D\\u0430 \\u043E\\u0431\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0443 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(20, \"input\", 12)(21, \"span\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"div\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(23, \"div\", 13)(24, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function FormComponent_Template_button_click_24_listener() {\n          return ctx.handleSubmit();\n        });\n        i0.ɵɵelementStart(25, \"p\");\n        i0.ɵɵtext(26, \"\\u0414\\u0430\\u043B\\u0435\\u0435\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"displayError\", ctx.isFieldValid(\"fieldOne\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.comboboxData);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"displayError\", ctx.isFieldValid(\"fieldSelect\"));\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"disabled\", !ctx.form.valid);\n      }\n    },\n    dependencies: [i4.NgForOf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.CheckboxControlValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i5.GlobalErrorComponent, i6.FieldErrorDisplayComponent],\n    styles: [\".form-fields[_ngcontent-%COMP%]{width:800px;height:400px;padding:20px;border-radius:25px;background-color:#bcdada}.form-fields[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{font-size:x-large;margin:20px}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]{display:flex;align-items:baseline;justify-content:space-between}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{padding:10px;margin:10px;border:1px solid rgb(165,187,187);border-radius:5px;box-shadow:0 5px 10px 2px #223c5033}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus{border:1px solid rgba(51,153,204,.3);box-shadow:2px 1px 2px #3399cc4d}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::-webkit-outer-spin-button, .form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{width:200px;padding:10px;margin:10px;border:1px solid rgb(165,187,187);border-radius:5px;box-shadow:0 5px 10px 2px #223c5033}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{display:flex;position:relative;cursor:pointer}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]{position:absolute;opactiy:0;width:0;height:0}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:20px;height:20px;background-color:#eeecec;transition:.3s background-color}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:after{content:\\\"\\\";position:absolute;display:none;left:6px;top:2px;width:6px;height:12px;border:solid white;border-width:0 3px 3px 0;transform:rotate(45deg)}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:hover   span[_ngcontent-%COMP%]{background-color:#ccc}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:checked ~ span[_ngcontent-%COMP%]{background-color:#2eaadc}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:checked ~ span[_ngcontent-%COMP%]:after{display:block}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{padding-left:40px;font-size:medium}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   .form-field__three[_ngcontent-%COMP%]{width:50%}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   .errors[_ngcontent-%COMP%]{color:red;height:25px;padding-left:15px}.form-fields[_ngcontent-%COMP%]   .from-field__four[_ngcontent-%COMP%]{display:flex}.form-fields[_ngcontent-%COMP%]   .from-field__four[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{width:150px;height:35px;margin:5px 10px;border-radius:5px;box-shadow:0 5px 10px 2px #223c5033}.form-fields[_ngcontent-%COMP%]   .from-field__four[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:disabled{pointer-events:none;color:#aaa;width:150px;height:35px;margin:5px 10px}.form-fields[_ngcontent-%COMP%]   .from-field__four[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{background-color:#2eabdcb3;color:#eeecec}.form-fields[_ngcontent-%COMP%]   .from-field__four[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:16px}@media screen and (max-width: 1280px){.form-fields[_ngcontent-%COMP%]{width:500px;height:500px}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]{align-items:flex-start;justify-content:space-between;flex-direction:column}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{width:450px}.form-fields[_ngcontent-%COMP%]   .group_input[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{width:300px;margin-left:10px;margin-top:20px}}\"]\n  });\n  return FormComponent;\n})();\n// Функция валидации поля\nfunction myValidatorField(formControl) {\n  if (formControl.value < 18 || formControl.value > 120) {\n    return {\n      myValidator: {\n        message: 'Необходимо число от 18 до 120'\n      }\n    };\n  }\n  return null;\n}\n// Функция валидации checkbox\nfunction myValidatorCheckbox(formControl) {\n  if (formControl.value === false) {\n    return {\n      myValidatorCheckbox: {\n        message: 'Необходимо дать согласие на обработку данных'\n      }\n    };\n  }\n  return null;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let FormComponent = class FormComponent {\n  constructor(svc, router, formBuilder) {\n    this.svc = svc;\n    this.router = router;\n    this.formBuilder = formBuilder;\n  }\n  isFieldValid(field) {\n    return !this.form.get(field).valid && this.form.get(field).touched || this.form.get(field).untouched && this.formSumitAttempt;\n  }\n  ngOnInit() {\n    this.svc.getComboxFields().subscribe(data => {\n      this.comboboxData = data;\n    });\n    this.form = this.formBuilder.group({\n      fieldOne: [null, [Validators.required, myValidatorField]],\n      fieldSelect: [null, Validators.required],\n      fieldCheck: [null, [Validators.required, myValidatorCheckbox]]\n    });\n  }\n  handleSubmit() {\n    this.formSumitAttempt = true;\n    if (this.form.valid) {\n      this.router.navigate(['/main']);\n      console.log(this.form.value);\n    }\n  }\n  reset() {\n    this.form.reset();\n    this.formSumitAttempt = false;\n  }\n};\nFormComponent = __decorate([Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss']\n})], FormComponent);\n// Функция валидации поля\nfunction myValidatorField(formControl) {\n  if (formControl.value < 18 || formControl.value > 120) {\n    return {\n      myValidator: {\n        message: 'Неправельный диапозон'\n      }\n    };\n  }\n  return null;\n}\n// Функция валидации checkbox\nfunction myValidatorCheckbox(formControl) {\n  if (formControl.value === false) {\n    return {\n      myValidatorCheckbox: {\n        message: 'Необходимо дать согласие на обработку данных'\n      }\n    };\n  }\n  return null;\n}","map":{"version":3,"names":["Component","Validators","FormComponent","constructor","svc","router","formBuilder","isFieldValid","field","form","get","valid","touched","untouched","formSumitAttempt","ngOnInit","getComboxFields","subscribe","data","comboboxData","group","fieldOne","required","myValidatorField","fieldSelect","fieldCheck","myValidatorCheckbox","handleSubmit","navigate","console","log","value","reset","__decorate","selector","templateUrl","styleUrls","formControl","myValidator","message"],"sources":["C:\\Users\\andre\\OneDrive\\Рабочий стол\\bkk\\task-bkk\\client\\src\\app\\components\\form\\form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { RequestService } from 'src/app/services/request.service';\r\n\r\n@Component({\r\n    selector: 'app-form',\r\n    templateUrl: './form.component.html',\r\n    styleUrls: ['./form.component.scss'],\r\n})\r\n\r\nexport class FormComponent implements OnInit {\r\n    constructor(private svc: RequestService, public router: Router, private formBuilder: FormBuilder) {}\r\n\r\n    form: FormGroup;\r\n    formSumitAttempt: boolean;\r\n    comboboxData: any;\r\n\r\n    isFieldValid(field: string) {\r\n        return (\r\n          (!this.form.get(field).valid && this.form.get(field).touched) ||\r\n          (this.form.get(field).untouched && this.formSumitAttempt)\r\n        );\r\n      }\r\n      \r\n    ngOnInit(): void {\r\n        this.svc.getComboxFields().subscribe(data => {\r\n            this.comboboxData = data\r\n        })\r\n\r\n        this.form = this.formBuilder.group({\r\n            fieldOne: [null, [Validators.required, myValidatorField]],\r\n            fieldSelect: [null, Validators.required],\r\n            fieldCheck: [null, [Validators.required, myValidatorCheckbox]],\r\n          });\r\n    }\r\n\r\n    handleSubmit() {\r\n        this.formSumitAttempt = true;\r\n        if(this.form.valid) {\r\n            this.router.navigate(['/main']);\r\n            console.log(this.form.value)\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.form.reset();\r\n        this.formSumitAttempt = false;\r\n      }\r\n}\r\n \r\n// Функция валидации поля\r\nfunction myValidatorField(formControl: FormControl) {\r\n\r\n    if (formControl.value < 18 || formControl.value > 120) {\r\n        return { myValidator: { message: 'Неправельный диапозон' } }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\n// Функция валидации checkbox\r\nfunction myValidatorCheckbox(formControl: FormControl) {\r\n\r\n    if (formControl.value === false) {\r\n        return { myValidatorCheckbox: { message: 'Необходимо дать согласие на обработку данных' } }\r\n    }\r\n\r\n    return null\r\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAqB,gBAAgB;AAWzE,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EACtBC,YAAoBC,GAAmB,EAASC,MAAc,EAAUC,WAAwB;IAA5E,KAAAF,GAAG,GAAHA,GAAG;IAAyB,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,WAAW,GAAXA,WAAW;EAAgB;EAMnGC,YAAYA,CAACC,KAAa;IACtB,OACG,CAAC,IAAI,CAACC,IAAI,CAACC,GAAG,CAACF,KAAK,CAAC,CAACG,KAAK,IAAI,IAAI,CAACF,IAAI,CAACC,GAAG,CAACF,KAAK,CAAC,CAACI,OAAO,IAC3D,IAAI,CAACH,IAAI,CAACC,GAAG,CAACF,KAAK,CAAC,CAACK,SAAS,IAAI,IAAI,CAACC,gBAAiB;EAE7D;EAEFC,QAAQA,CAAA;IACJ,IAAI,CAACX,GAAG,CAACY,eAAe,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MACxC,IAAI,CAACC,YAAY,GAAGD,IAAI;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACT,IAAI,GAAG,IAAI,CAACH,WAAW,CAACc,KAAK,CAAC;MAC/BC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAACpB,UAAU,CAACqB,QAAQ,EAAEC,gBAAgB,CAAC,CAAC;MACzDC,WAAW,EAAE,CAAC,IAAI,EAAEvB,UAAU,CAACqB,QAAQ,CAAC;MACxCG,UAAU,EAAE,CAAC,IAAI,EAAE,CAACxB,UAAU,CAACqB,QAAQ,EAAEI,mBAAmB,CAAC;KAC9D,CAAC;EACR;EAEAC,YAAYA,CAAA;IACR,IAAI,CAACb,gBAAgB,GAAG,IAAI;IAC5B,IAAG,IAAI,CAACL,IAAI,CAACE,KAAK,EAAE;MAChB,IAAI,CAACN,MAAM,CAACuB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACrB,IAAI,CAACsB,KAAK,CAAC;;EAEpC;EAEAC,KAAKA,CAAA;IACD,IAAI,CAACvB,IAAI,CAACuB,KAAK,EAAE;IACjB,IAAI,CAAClB,gBAAgB,GAAG,KAAK;EAC/B;CACL;AAtCYZ,aAAa,GAAA+B,UAAA,EANzBjC,SAAS,CAAC;EACPkC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,uBAAuB;CACtC,CAAC,C,EAEWlC,aAAa,CAsCzB;AAED;AACA,SAASqB,gBAAgBA,CAACc,WAAwB;EAE9C,IAAIA,WAAW,CAACN,KAAK,GAAG,EAAE,IAAIM,WAAW,CAACN,KAAK,GAAG,GAAG,EAAE;IACnD,OAAO;MAAEO,WAAW,EAAE;QAAEC,OAAO,EAAE;MAAuB;IAAE,CAAE;;EAGhE,OAAO,IAAI;AACf;AAEA;AACA,SAASb,mBAAmBA,CAACW,WAAwB;EAEjD,IAAIA,WAAW,CAACN,KAAK,KAAK,KAAK,EAAE;IAC7B,OAAO;MAAEL,mBAAmB,EAAE;QAAEa,OAAO,EAAE;MAA8C;IAAE,CAAE;;EAG/F,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}